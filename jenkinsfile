pipeline {
    agent any

    environment {
        SCANNER_HOME = tool 'sonarqube-scanner'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Yaswanth270/java-web-app.git'
            }
        }

        stage('Compile') {
            steps {
                sh 'mvn compile'
            }
        }

        stage('Code Analysis') {
            steps {
                withSonarQubeEnv('sonarqube-server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=java-web-app \
                        -Dsonar.java.binaries=. \
                        -Dsonar.projectKey=java-web-app'''
                }
            }
        }

        stage('Docker Stage Cleanup') {
            steps {
                sh 'docker stop $(docker ps -q)'
                sh  'docker rm $(docker ps -aq)'
                  sh 'docker rmi $(docker images -q)'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn install'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t java-image-latest .'
            }
        }

        stage('Run Docker Container') {
            steps {
                sh 'docker run -itd --name java-container -p 8082:8080 java-image-latest'
            }
        }
    }

    post {
        success {
            echo 'Slack Notification: Build Success'
            slackSend channel: '#devops-ci-cd-project', message: 'Build success', color: 'good'
        }
        failure {
            echo 'Slack Notification: Build Failure'
            slackSend channel: '#devops-ci-cd-project', message: 'Build failed', color: 'danger'
        }
    }
}

